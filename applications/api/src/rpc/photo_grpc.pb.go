// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package photo

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PhotoProtoClient is the client API for PhotoProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhotoProtoClient interface {
	GetPhotoById(ctx context.Context, in *wrappers.Int32Value, opts ...grpc.CallOption) (*Photo, error)
	GetAllPhotos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Photos, error)
}

type photoProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewPhotoProtoClient(cc grpc.ClientConnInterface) PhotoProtoClient {
	return &photoProtoClient{cc}
}

func (c *photoProtoClient) GetPhotoById(ctx context.Context, in *wrappers.Int32Value, opts ...grpc.CallOption) (*Photo, error) {
	out := new(Photo)
	err := c.cc.Invoke(ctx, "/photo.PhotoProto/GetPhotoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoProtoClient) GetAllPhotos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Photos, error) {
	out := new(Photos)
	err := c.cc.Invoke(ctx, "/photo.PhotoProto/GetAllPhotos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhotoProtoServer is the server API for PhotoProto service.
// All implementations must embed UnimplementedPhotoProtoServer
// for forward compatibility
type PhotoProtoServer interface {
	GetPhotoById(context.Context, *wrappers.Int32Value) (*Photo, error)
	GetAllPhotos(context.Context, *empty.Empty) (*Photos, error)
	mustEmbedUnimplementedPhotoProtoServer()
}

// UnimplementedPhotoProtoServer must be embedded to have forward compatible implementations.
type UnimplementedPhotoProtoServer struct {
}

func (UnimplementedPhotoProtoServer) GetPhotoById(context.Context, *wrappers.Int32Value) (*Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhotoById not implemented")
}
func (UnimplementedPhotoProtoServer) GetAllPhotos(context.Context, *empty.Empty) (*Photos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPhotos not implemented")
}
func (UnimplementedPhotoProtoServer) mustEmbedUnimplementedPhotoProtoServer() {}

// UnsafePhotoProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhotoProtoServer will
// result in compilation errors.
type UnsafePhotoProtoServer interface {
	mustEmbedUnimplementedPhotoProtoServer()
}

func RegisterPhotoProtoServer(s grpc.ServiceRegistrar, srv PhotoProtoServer) {
	s.RegisterService(&PhotoProto_ServiceDesc, srv)
}

func _PhotoProto_GetPhotoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoProtoServer).GetPhotoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photo.PhotoProto/GetPhotoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoProtoServer).GetPhotoById(ctx, req.(*wrappers.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoProto_GetAllPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoProtoServer).GetAllPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photo.PhotoProto/GetAllPhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoProtoServer).GetAllPhotos(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PhotoProto_ServiceDesc is the grpc.ServiceDesc for PhotoProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhotoProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "photo.PhotoProto",
	HandlerType: (*PhotoProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPhotoById",
			Handler:    _PhotoProto_GetPhotoById_Handler,
		},
		{
			MethodName: "GetAllPhotos",
			Handler:    _PhotoProto_GetAllPhotos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "photo.proto",
}
