// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/andreasvikke/CPH-Bussines-LS-Exam/applications/services/postgres/ent/checkin"
)

// CheckInCreate is the builder for creating a CheckIn entity.
type CheckInCreate struct {
	config
	mutation *CheckInMutation
	hooks    []Hook
}

// SetAttendanceCode sets the "attendanceCode" field.
func (cic *CheckInCreate) SetAttendanceCode(i int64) *CheckInCreate {
	cic.mutation.SetAttendanceCode(i)
	return cic
}

// SetStudentId sets the "studentId" field.
func (cic *CheckInCreate) SetStudentId(i int64) *CheckInCreate {
	cic.mutation.SetStudentId(i)
	return cic
}

// SetStatus sets the "status" field.
func (cic *CheckInCreate) SetStatus(c checkin.Status) *CheckInCreate {
	cic.mutation.SetStatus(c)
	return cic
}

// SetCheckinTime sets the "checkinTime" field.
func (cic *CheckInCreate) SetCheckinTime(i int64) *CheckInCreate {
	cic.mutation.SetCheckinTime(i)
	return cic
}

// Mutation returns the CheckInMutation object of the builder.
func (cic *CheckInCreate) Mutation() *CheckInMutation {
	return cic.mutation
}

// Save creates the CheckIn in the database.
func (cic *CheckInCreate) Save(ctx context.Context) (*CheckIn, error) {
	var (
		err  error
		node *CheckIn
	)
	if len(cic.hooks) == 0 {
		if err = cic.check(); err != nil {
			return nil, err
		}
		node, err = cic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckInMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cic.check(); err != nil {
				return nil, err
			}
			cic.mutation = mutation
			if node, err = cic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cic.hooks) - 1; i >= 0; i-- {
			if cic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cic *CheckInCreate) SaveX(ctx context.Context) *CheckIn {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cic *CheckInCreate) Exec(ctx context.Context) error {
	_, err := cic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cic *CheckInCreate) ExecX(ctx context.Context) {
	if err := cic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cic *CheckInCreate) check() error {
	if _, ok := cic.mutation.AttendanceCode(); !ok {
		return &ValidationError{Name: "attendanceCode", err: errors.New(`ent: missing required field "attendanceCode"`)}
	}
	if v, ok := cic.mutation.AttendanceCode(); ok {
		if err := checkin.AttendanceCodeValidator(v); err != nil {
			return &ValidationError{Name: "attendanceCode", err: fmt.Errorf(`ent: validator failed for field "attendanceCode": %w`, err)}
		}
	}
	if _, ok := cic.mutation.StudentId(); !ok {
		return &ValidationError{Name: "studentId", err: errors.New(`ent: missing required field "studentId"`)}
	}
	if _, ok := cic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	if v, ok := cic.mutation.Status(); ok {
		if err := checkin.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "status": %w`, err)}
		}
	}
	if _, ok := cic.mutation.CheckinTime(); !ok {
		return &ValidationError{Name: "checkinTime", err: errors.New(`ent: missing required field "checkinTime"`)}
	}
	return nil
}

func (cic *CheckInCreate) sqlSave(ctx context.Context) (*CheckIn, error) {
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cic *CheckInCreate) createSpec() (*CheckIn, *sqlgraph.CreateSpec) {
	var (
		_node = &CheckIn{config: cic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: checkin.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checkin.FieldID,
			},
		}
	)
	if value, ok := cic.mutation.AttendanceCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: checkin.FieldAttendanceCode,
		})
		_node.AttendanceCode = value
	}
	if value, ok := cic.mutation.StudentId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: checkin.FieldStudentId,
		})
		_node.StudentId = value
	}
	if value, ok := cic.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: checkin.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := cic.mutation.CheckinTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: checkin.FieldCheckinTime,
		})
		_node.CheckinTime = value
	}
	return _node, _spec
}

// CheckInCreateBulk is the builder for creating many CheckIn entities in bulk.
type CheckInCreateBulk struct {
	config
	builders []*CheckInCreate
}

// Save creates the CheckIn entities in the database.
func (cicb *CheckInCreateBulk) Save(ctx context.Context) ([]*CheckIn, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*CheckIn, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CheckInMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cicb *CheckInCreateBulk) SaveX(ctx context.Context) []*CheckIn {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicb *CheckInCreateBulk) Exec(ctx context.Context) error {
	_, err := cicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicb *CheckInCreateBulk) ExecX(ctx context.Context) {
	if err := cicb.Exec(ctx); err != nil {
		panic(err)
	}
}
