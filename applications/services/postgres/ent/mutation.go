// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/andreasvikke/CPH-Bussines-LS-Exam/applications/services/postgres/ent/checkin"
	"github.com/andreasvikke/CPH-Bussines-LS-Exam/applications/services/postgres/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCheckIn = "CheckIn"
)

// CheckInMutation represents an operation that mutates the CheckIn nodes in the graph.
type CheckInMutation struct {
	config
	op                Op
	typ               string
	id                *int
	attendanceCode    *int64
	addattendanceCode *int64
	studentId         *int64
	addstudentId      *int64
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*CheckIn, error)
	predicates        []predicate.CheckIn
}

var _ ent.Mutation = (*CheckInMutation)(nil)

// checkinOption allows management of the mutation configuration using functional options.
type checkinOption func(*CheckInMutation)

// newCheckInMutation creates new mutation for the CheckIn entity.
func newCheckInMutation(c config, op Op, opts ...checkinOption) *CheckInMutation {
	m := &CheckInMutation{
		config:        c,
		op:            op,
		typ:           TypeCheckIn,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCheckInID sets the ID field of the mutation.
func withCheckInID(id int) checkinOption {
	return func(m *CheckInMutation) {
		var (
			err   error
			once  sync.Once
			value *CheckIn
		)
		m.oldValue = func(ctx context.Context) (*CheckIn, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CheckIn.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCheckIn sets the old CheckIn of the mutation.
func withCheckIn(node *CheckIn) checkinOption {
	return func(m *CheckInMutation) {
		m.oldValue = func(context.Context) (*CheckIn, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CheckInMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CheckInMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CheckInMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAttendanceCode sets the "attendanceCode" field.
func (m *CheckInMutation) SetAttendanceCode(i int64) {
	m.attendanceCode = &i
	m.addattendanceCode = nil
}

// AttendanceCode returns the value of the "attendanceCode" field in the mutation.
func (m *CheckInMutation) AttendanceCode() (r int64, exists bool) {
	v := m.attendanceCode
	if v == nil {
		return
	}
	return *v, true
}

// OldAttendanceCode returns the old "attendanceCode" field's value of the CheckIn entity.
// If the CheckIn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CheckInMutation) OldAttendanceCode(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAttendanceCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAttendanceCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttendanceCode: %w", err)
	}
	return oldValue.AttendanceCode, nil
}

// AddAttendanceCode adds i to the "attendanceCode" field.
func (m *CheckInMutation) AddAttendanceCode(i int64) {
	if m.addattendanceCode != nil {
		*m.addattendanceCode += i
	} else {
		m.addattendanceCode = &i
	}
}

// AddedAttendanceCode returns the value that was added to the "attendanceCode" field in this mutation.
func (m *CheckInMutation) AddedAttendanceCode() (r int64, exists bool) {
	v := m.addattendanceCode
	if v == nil {
		return
	}
	return *v, true
}

// ResetAttendanceCode resets all changes to the "attendanceCode" field.
func (m *CheckInMutation) ResetAttendanceCode() {
	m.attendanceCode = nil
	m.addattendanceCode = nil
}

// SetStudentId sets the "studentId" field.
func (m *CheckInMutation) SetStudentId(i int64) {
	m.studentId = &i
	m.addstudentId = nil
}

// StudentId returns the value of the "studentId" field in the mutation.
func (m *CheckInMutation) StudentId() (r int64, exists bool) {
	v := m.studentId
	if v == nil {
		return
	}
	return *v, true
}

// OldStudentId returns the old "studentId" field's value of the CheckIn entity.
// If the CheckIn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CheckInMutation) OldStudentId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStudentId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStudentId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStudentId: %w", err)
	}
	return oldValue.StudentId, nil
}

// AddStudentId adds i to the "studentId" field.
func (m *CheckInMutation) AddStudentId(i int64) {
	if m.addstudentId != nil {
		*m.addstudentId += i
	} else {
		m.addstudentId = &i
	}
}

// AddedStudentId returns the value that was added to the "studentId" field in this mutation.
func (m *CheckInMutation) AddedStudentId() (r int64, exists bool) {
	v := m.addstudentId
	if v == nil {
		return
	}
	return *v, true
}

// ResetStudentId resets all changes to the "studentId" field.
func (m *CheckInMutation) ResetStudentId() {
	m.studentId = nil
	m.addstudentId = nil
}

// Where appends a list predicates to the CheckInMutation builder.
func (m *CheckInMutation) Where(ps ...predicate.CheckIn) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CheckInMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CheckIn).
func (m *CheckInMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CheckInMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.attendanceCode != nil {
		fields = append(fields, checkin.FieldAttendanceCode)
	}
	if m.studentId != nil {
		fields = append(fields, checkin.FieldStudentId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CheckInMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case checkin.FieldAttendanceCode:
		return m.AttendanceCode()
	case checkin.FieldStudentId:
		return m.StudentId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CheckInMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case checkin.FieldAttendanceCode:
		return m.OldAttendanceCode(ctx)
	case checkin.FieldStudentId:
		return m.OldStudentId(ctx)
	}
	return nil, fmt.Errorf("unknown CheckIn field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CheckInMutation) SetField(name string, value ent.Value) error {
	switch name {
	case checkin.FieldAttendanceCode:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttendanceCode(v)
		return nil
	case checkin.FieldStudentId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStudentId(v)
		return nil
	}
	return fmt.Errorf("unknown CheckIn field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CheckInMutation) AddedFields() []string {
	var fields []string
	if m.addattendanceCode != nil {
		fields = append(fields, checkin.FieldAttendanceCode)
	}
	if m.addstudentId != nil {
		fields = append(fields, checkin.FieldStudentId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CheckInMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case checkin.FieldAttendanceCode:
		return m.AddedAttendanceCode()
	case checkin.FieldStudentId:
		return m.AddedStudentId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CheckInMutation) AddField(name string, value ent.Value) error {
	switch name {
	case checkin.FieldAttendanceCode:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAttendanceCode(v)
		return nil
	case checkin.FieldStudentId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStudentId(v)
		return nil
	}
	return fmt.Errorf("unknown CheckIn numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CheckInMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CheckInMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CheckInMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CheckIn nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CheckInMutation) ResetField(name string) error {
	switch name {
	case checkin.FieldAttendanceCode:
		m.ResetAttendanceCode()
		return nil
	case checkin.FieldStudentId:
		m.ResetStudentId()
		return nil
	}
	return fmt.Errorf("unknown CheckIn field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CheckInMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CheckInMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CheckInMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CheckInMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CheckInMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CheckInMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CheckInMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CheckIn unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CheckInMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CheckIn edge %s", name)
}
