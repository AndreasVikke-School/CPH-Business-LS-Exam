// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"postgres_service/ent/checkin"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// CheckIn is the model entity for the CheckIn schema.
type CheckIn struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AttendanceCode holds the value of the "attendanceCode" field.
	AttendanceCode int64 `json:"attendanceCode,omitempty"`
	// StudentId holds the value of the "studentId" field.
	StudentId int64 `json:"studentId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CheckIn) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case checkin.FieldID, checkin.FieldAttendanceCode, checkin.FieldStudentId:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CheckIn", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CheckIn fields.
func (ci *CheckIn) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case checkin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ci.ID = int(value.Int64)
		case checkin.FieldAttendanceCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attendanceCode", values[i])
			} else if value.Valid {
				ci.AttendanceCode = value.Int64
			}
		case checkin.FieldStudentId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field studentId", values[i])
			} else if value.Valid {
				ci.StudentId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CheckIn.
// Note that you need to call CheckIn.Unwrap() before calling this method if this CheckIn
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *CheckIn) Update() *CheckInUpdateOne {
	return (&CheckInClient{config: ci.config}).UpdateOne(ci)
}

// Unwrap unwraps the CheckIn entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *CheckIn) Unwrap() *CheckIn {
	tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("ent: CheckIn is not a transactional entity")
	}
	ci.config.driver = tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *CheckIn) String() string {
	var builder strings.Builder
	builder.WriteString("CheckIn(")
	builder.WriteString(fmt.Sprintf("id=%v", ci.ID))
	builder.WriteString(", attendanceCode=")
	builder.WriteString(fmt.Sprintf("%v", ci.AttendanceCode))
	builder.WriteString(", studentId=")
	builder.WriteString(fmt.Sprintf("%v", ci.StudentId))
	builder.WriteByte(')')
	return builder.String()
}

// CheckIns is a parsable slice of CheckIn.
type CheckIns []*CheckIn

func (ci CheckIns) config(cfg config) {
	for _i := range ci {
		ci[_i].config = cfg
	}
}
